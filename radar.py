# -*- coding: utf-8 -*-
"""Radar.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KdIcB98yi1kXQBfQuQnsdH9eSzRjeMBe

Radar de proximidad con HC-SR04 (promedio móvil + registro CSV)

Objetivos:

Medir distancia con el sensor ultrasónico.

Implementar suavizado (promedio móvil) y registro a archivo CSV.

Materiales: HC-SR04, resistencias para divisor de voltaje en ECHO (5V→3.3V), jumpers, protoboard.
Seguridad: el pin ECHO del HC-SR04 debe entrar a la Pi a 3.3V (usa divisor 1kΩ/2kΩ aprox.).

Conexiones (BCM): TRIG=23, ECHO=24 (con divisor), 5V y GND al sensor.
"""

import RPi.GPIO as GPIO, time, csv, statistics

GPIO.setmode(GPIO.BCM)
TRIG, ECHO = 23, 24
GPIO.setup(TRIG, GPIO.OUT); GPIO.setup(ECHO, GPIO.IN)

def distancia_cm():
    # pulso de disparo
    GPIO.output(TRIG, 0); time.sleep(0.0002)
    GPIO.output(TRIG, 1); time.sleep(0.00001)
    GPIO.output(TRIG, 0)

    # medir duración del eco
    t0 = time.time()
    while GPIO.input(ECHO) == 0:
        if time.time()-t0 > 0.02: return None
    start = time.time()
    while GPIO.input(ECHO) == 1:
        if time.time()-start > 0.02: return None
    end = time.time()

    # distancia = (tiempo * velocidad sonido / 2)
    dur = end - start
    return (dur * 34300) / 2  # cm

ventana = []
N = 5  # tamaño promedio móvil

with open("distancias.csv", "w", newline="") as f:
    writer = csv.writer(f); writer.writerow(["timestamp","dist_cm","smooth_cm"])
    try:
        while True:
            d = distancia_cm()
            if d is not None and 2 < d < 400:
                ventana.append(d)
                if len(ventana) > N: ventana.pop(0)
                suave = round(statistics.mean(ventana), 2)
                print(f"Inst: {d:.1f} cm | Suave: {suave:.1f} cm")
                writer.writerow([time.time(), round(d,2), suave])
            else:
                print("Lectura inválida")
            time.sleep(0.1)
    except KeyboardInterrupt:
        pass
    finally:
        GPIO.cleanup()